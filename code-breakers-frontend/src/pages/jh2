import React, { useState, useRef, useEffect } from 'react';
export default function DocenteActividad() {
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [question, setQuestion] = useState('');
    const [ageGroup, setAgeGroup] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [steps, setSteps] = useState(['']);
    const [correctSteps, setCorrectSteps] = useState([]);
    const [shuffledSteps, setShuffledSteps] = useState([]);
    const [userAnswers, setUserAnswers] = useState([]);
    const [dragItem, setDragItem] = useState(null);
    const [gameCompleted, setGameCompleted] = useState(false);
    const [isPreview, setIsPreview] = useState(false);
    const [message, setMessage] = useState('');
    const [textColor, setTextColor] = useState('#000000');
    const [fontSize, setFontSize] = useState('16px');
    const [textAlign, setTextAlign] = useState('left');
    const [isBold, setIsBold] = useState(false);
    const [isItalic, setIsItalic] = useState(false);
    const [images, setImages] = useState([]);
    const [feedback, setFeedback] = useState('');
    const [showFeedback, setShowFeedback] = useState(false);
    const [containerHeight, setContainerHeight] = useState(300);
    const descriptionRef = useRef(null);
    const fileInputRef = useRef(null);
    const containerRef = useRef(null);
    const limits = { facil: 6, intermedio: 8, dificil: 10 };
    useEffect(() => {
        if (images.length > 0) {
            const maxImageBottom = Math.max(...images.map(img => img.y + img.height));
            const minHeight = Math.max(300, maxImageBottom + 100); 
            setContainerHeight(minHeight);
        } else {setContainerHeight(300);}
    }, [images]);
    const insertImage = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = () => {
                const newImage = {id: Date.now().toString(), src: reader.result, width: 200,height: 150,x: 20, y: 20};
                setImages([...images, newImage]);
            };
            reader.readAsDataURL(file);
        }
    };
    const updateImageSize = (id, newWidth, newHeight) => {
        if (!containerRef.current) return;
        const containerRect = containerRef.current.getBoundingClientRect();
        const maxWidth = containerRect.width - 40;
        const img = images.find(img => img.id === id);
        if (!img) return;
        const constrainedWidth = Math.max(50, Math.min(newWidth, maxWidth - img.x));
        const constrainedHeight = Math.max(50, newHeight);
        setImages(images.map(img =>
            img.id === id ? {
                ...img,
                width: constrainedWidth,
                height: constrainedHeight
            } : img
        ));
    };
    const updateImagePosition = (id, x, y) => {
        if (!containerRef.current) return;
        const containerRect = containerRef.current.getBoundingClientRect();
        const img = images.find(img => img.id === id);
        if (!img) return;
        const maxX = containerRect.width - img.width - 20;
        const maxY = Math.max(0, containerHeight - img.height - 20);
        const constrainedX = Math.max(20, Math.min(x, maxX));
        const constrainedY = Math.max(20, Math.min(y, maxY));
        setImages(images.map(img =>
            img.id === id ? {
                ...img,
                x: constrainedX,
                y: constrainedY
            } : img
        ));
    };
    const removeImage = (id) => {
        setImages(images.filter(img => img.id !== id));
    };
    const applyFormatting = (command) => {
        const textarea = descriptionRef.current;
        if (!textarea) return;
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selectedText = textarea.value.substring(start, end);
        if (selectedText) {
            let formattedText = selectedText;
            switch (command) {
                case 'bold':
                    formattedText = `<span style="font-weight: bold;">${selectedText}</span>`;
                    break;
                case 'italic':
                    formattedText = `<span style="font-style: italic;">${selectedText}</span>`;
                    break;
                case 'align-left':
                    formattedText = `<span style="display: block; text-align: left;">${selectedText}</span>`;
                    break;
                case 'align-center':
                    formattedText = `<span style="display: block; text-align: center;">${selectedText}</span>`;
                    break;
                case 'align-right':
                    formattedText = `<span style="display: block; text-align: right;">${selectedText}</span>`;
                    break;
                case 'color':
                    formattedText = `<span style="color: ${textColor};">${selectedText}</span>`;
                    break;
                case 'fontSize':
                    formattedText = `<span style="font-size: ${fontSize};">${selectedText}</span>`;
                    break;
            }
            const newValue = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
            setDescription(newValue);

            setTimeout(() => {
                textarea.focus();
                textarea.setSelectionRange(start, start + formattedText.length);
            }, 0);
        }
    };
    const handleStepChange = (index, value) => {
        const updatedSteps = [...steps];
        updatedSteps[index] = value;
        setSteps(updatedSteps);
    };
    const addStep = () => {
        if (!difficulty) return setMessage('Selecciona una dificultad antes de agregar pasos.');
        if (steps.length >= limits[difficulty]) {
            return setMessage(`Límite alcanzado: máximo ${limits[difficulty]} pasos.`);
        }
        setSteps([...steps, '']);
        setMessage('');
    };
    const deleteStep = (index) => {
        const updatedSteps = steps.filter((_, idx) => idx !== index);
        setSteps(updatedSteps);
    };
    const startPreview = () => {
        if (!ageGroup || !difficulty) {
            return setMessage('Selecciona un rango de edad y una dificultad.');
        }
        const filtered = steps.filter((s) => s.trim() !== '');
        if (filtered.length < 2) return setMessage('Agrega al menos 2 pasos.');
        if (filtered.length > limits[difficulty]) {
            return setMessage(`Has excedido el límite de pasos (${limits[difficulty]}).`);
        }
        setCorrectSteps(filtered);
        setShuffledSteps([...filtered].sort(() => Math.random() - 0.5));
        setUserAnswers(new Array(filtered.length).fill(null));
        setDragItem(null);
        setGameCompleted(false);
        setIsPreview(true);
        setMessage('');
        setShowFeedback(false);
        setFeedback('');
    };
    const resetPreview = () => {
        setIsPreview(false);
        setUserAnswers([]);
        setDragItem(null);
        setGameCompleted(false);
        setMessage('');
        setShowFeedback(false);
        setFeedback('');
    };
    const handleDragStart = (e, item) => {
        if (!gameCompleted) {
            setDragItem(item);
            e.dataTransfer.effectAllowed = 'move';
        }
    };
    const handleDragOver = (e) => {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
    };
    const handleDrop = (e, index) => {
        e.preventDefault();
        if (gameCompleted || !dragItem) return;
        const newAnswers = [...userAnswers];
        newAnswers[index] = dragItem;
        setUserAnswers(newAnswers);
        setDragItem(null);
        setMessage('');
    };
    const saveSteps = () => {
        if (userAnswers.some(answer => answer === null)) {
            setMessage('Por favor, completa todos los pasos antes de guardar.');
            return;
        }
        setGameCompleted(true);
        generateFeedback();
        setMessage('Pasos guardados. Revisa tu retroalimentación.');
    };
    const generateFeedback = () => {
        let correctCount = 0;
        let feedbackDetails = [];
        userAnswers.forEach((userAnswer, index) => {
            if (userAnswer === correctSteps[index]) {
                correctCount++;
                feedbackDetails.push(`✅ Paso ${index + 1}: Correcto - "${userAnswer}"`);
            } else {
                feedbackDetails.push(`❌ Paso ${index + 1}: Incorrecto`);
                feedbackDetails.push(`   Tu respuesta: "${userAnswer}"`);
                feedbackDetails.push(`   Respuesta correcta: "${correctSteps[index]}"`);
            }
        });
        const percentage = Math.round((correctCount / correctSteps.length) * 100);
        let overallFeedback = '';
        if (percentage === 100) {
            overallFeedback = '🎉 ¡Excelente! Has completado la secuencia perfectamente.';
        } else if (percentage >= 70) {
            overallFeedback = '👍 ¡Buen trabajo! Tienes la mayoría de pasos correctos.';
        } else if (percentage >= 50) {
            overallFeedback = '📚 Bien intentado. Revisa algunos pasos para mejorar.';
        } else {
            overallFeedback = '💪 Sigue practicando. Puedes mejorar revisando el material.';
        }
        const finalFeedback = `${overallFeedback}\n\nPuntuación: ${correctCount}/${correctSteps.length} (${percentage}%)\n\nDetalles:\n${feedbackDetails.join('\n')}`;
        setFeedback(finalFeedback);
        setShowFeedback(true);
    };
    const resetGame = () => {
        setShuffledSteps([...correctSteps].sort(() => Math.random() - 0.5));
        setUserAnswers(new Array(correctSteps.length).fill(null));
        setGameCompleted(false);
        setShowFeedback(false);
        setFeedback('');
        setMessage('');
    };
    const processDescriptionForDisplay = (text) => {
        if (!text) return '';
        let processedText = text.replace(/\n/g, '<br>');
        return processedText;
    };
    return (
        <div className="min-h-screen bg-gray-50 p-4">
            {!isPreview ? (
                <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-6">
                    <h2 className="text-2xl font-bold text-gray-800 mb-6">Crear nueva actividad</h2>
                    <div className="space-y-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Título:</label>
                            <input
                                type="text"
                                value={title}
                                onChange={(e) => setTitle(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="Ingresa el título de la actividad"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Descripción:</label>
                            <div className="border border-gray-300 rounded-md">
                                <div className="flex items-center gap-2 p-2 border-b border-gray-200 bg-gray-50 flex-wrap">
                                    <button
                                        onClick={() => applyFormatting('bold')}
                                        className="px-3 py-1 rounded bg-white text-gray-700 border hover:bg-blue-100"
                                        title="Negrita"
                                    >
                                        <strong>B</strong>
                                    </button>
                                    <button
                                        onClick={() => applyFormatting('italic')}
                                        className="px-3 py-1 rounded bg-white text-gray-700 border hover:bg-blue-100"
                                        title="Cursiva"
                                    >
                                        <em>I</em>
                                    </button>
                                    <button
                                        onClick={() => applyFormatting('align-left')}
                                        className="px-3 py-1 rounded bg-white text-gray-700 border hover:bg-blue-100"
                                        title="Alinear izquierda"
                                    > ←
                                    </button>
                                    <button
                                        onClick={() => applyFormatting('align-center')}
                                        className="px-3 py-1 rounded bg-white text-gray-700 border hover:bg-blue-100"
                                        title="Centrar"
                                    > ↔
                                    </button>
                                    <button
                                        onClick={() => applyFormatting('align-right')}
                                        className="px-3 py-1 rounded bg-white text-gray-700 border hover:bg-blue-100"
                                        title="Alinear derecha"
                                    > →
                                    </button>
                                    <input
                                        type="color"
                                        value={textColor}
                                        onChange={(e) => setTextColor(e.target.value)}
                                        className="w-8 h-8 border rounded cursor-pointer"
                                        title="Color del texto"
                                    />
                                    <button
                                        onClick={() => applyFormatting('color')}
                                        className="px-2 py-1 text-xs bg-white border rounded hover:bg-blue-100"
                                        title="Aplicar color"
                                    >Color
                                    </button>
                                    <select
                                        value={fontSize}
                                        onChange={(e) => setFontSize(e.target.value)}
                                        className="px-2 py-1 border rounded"
                                    >
                                        <option value="12px">12px</option>
                                        <option value="14px">14px</option>
                                        <option value="16px">16px</option>
                                        <option value="18px">18px</option>
                                        <option value="24px">24px</option>
                                    </select>
                                    <button
                                        onClick={() => applyFormatting('fontSize')}
                                        className="px-2 py-1 text-xs bg-white border rounded hover:bg-blue-100"
                                        title="Aplicar tamaño"
                                    >Tamaño
                                    </button>
                                    <button
                                        onClick={() => fileInputRef.current?.click()}
                                        className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                                        title="Insertar imagen"
                                    >🖼️
                                    </button>
                                    <input
                                        ref={fileInputRef}
                                        type="file"
                                        accept="image/*"
                                        onChange={insertImage}
                                        className="hidden"
                                    />
                                </div>
                                <div
                                    ref={containerRef}
                                    className="relative"
                                    style={{ minHeight: `${containerHeight}px` }}
                                >
                                    <textarea
                                        ref={descriptionRef}
                                        value={description}
                                        onChange={(e) => setDescription(e.target.value)}
                                        className="w-full p-3 border-0 resize-none focus:outline-none bg-transparent relative z-10"
                                        style={{
                                            minHeight: `${containerHeight}px`,
                                            fontSize: '16px',
                                            color: '#000000',
                                            lineHeight: '1.5'
                                        }}
                                        placeholder="Describe tu actividad aquí. Selecciona texto para aplicar formato específico..."
                                    />
                                    {images.map((img) => (
                                        <div
                                            key={img.id}
                                            className="absolute border-2 border-blue-400 rounded cursor-move group bg-white shadow-sm"
                                            style={{
                                                left: img.x + 'px',
                                                top: img.y + 'px',
                                                width: img.width + 'px',
                                                height: img.height + 'px',
                                                zIndex: 30
                                            }}
                                        >
                                            <img
                                                src={img.src}
                                                alt=""
                                                className="w-full h-full object-contain pointer-events-none"
                                                onMouseDown={(e) => {
                                                    e.preventDefault();
                                                    const rect = e.currentTarget.parentElement.getBoundingClientRect();
                                                    const containerRect = containerRef.current.getBoundingClientRect();
                                                    const startX = e.clientX - rect.left;
                                                    const startY = e.clientY - rect.top;
                                                    const handleMouseMove = (e) => {
                                                        const newX = e.clientX - containerRect.left - startX;
                                                        const newY = e.clientY - containerRect.top - startY;
                                                        updateImagePosition(img.id, newX, newY);
                                                    };
                                                    const handleMouseUp = () => {
                                                        document.removeEventListener('mousemove', handleMouseMove);
                                                        document.removeEventListener('mouseup', handleMouseUp);
                                                    };
                                                    document.addEventListener('mousemove', handleMouseMove);
                                                    document.addEventListener('mouseup', handleMouseUp);
                                                }}
                                            />
                                            <button
                                                onClick={() => removeImage(img.id)}
                                                className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 text-xs hover:bg-red-600 z-40"
                                            > ×
                                            </button>
                                            {/* Resize handle */}
                                            <div
                                                className="absolute bottom-0 right-0 w-4 h-4 bg-blue-500 cursor-se-resize opacity-0 group-hover:opacity-100 z-40"
                                                onMouseDown={(e) => {
                                                    e.preventDefault();
                                                    e.stopPropagation();
                                                    const startX = e.clientX;
                                                    const startY = e.clientY;
                                                    const startWidth = img.width;
                                                    const startHeight = img.height;
                                                    const handleMouseMove = (e) => {
                                                        const newWidth = startWidth + (e.clientX - startX);
                                                        const newHeight = startHeight + (e.clientY - startY);
                                                        updateImageSize(img.id, newWidth, newHeight);
                                                    };
                                                    const handleMouseUp = () => {
                                                        document.removeEventListener('mousemove', handleMouseMove);
                                                        document.removeEventListener('mouseup', handleMouseUp);
                                                    };
                                                    document.addEventListener('mousemove', handleMouseMove);
                                                    document.addEventListener('mouseup', handleMouseUp);
                                                }}
                                            ></div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">Pregunta:</label>
                            <input
                                type="text"
                                value={question}
                                onChange={(e) => setQuestion(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="¿Cuál es la pregunta de tu actividad?"
                            />
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">Dificultad:</label>
                                <select
                                    value={difficulty}
                                    onChange={(e) => setDifficulty(e.target.value)}
                                    className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                >
                                    <option value="">Selecciona...</option>
                                    <option value="facil">Fácil</option>
                                    <option value="intermedio">Intermedio</option>
                                    <option value="dificil">Difícil</option>
                                </select>
                            </div>
                        </div>
                        <div>
                            <h4 className="text-lg font-medium text-gray-800 mb-3">Pasos esperados:</h4>
                            <div className="space-y-2">
                                {steps.map((step, idx) => (
                                    <div key={idx} className="flex gap-2">
                                        <input
                                            placeholder={`Paso ${idx + 1}`}
                                            value={step}
                                            onChange={(e) => handleStepChange(idx, e.target.value)}
                                            className="flex-1 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                        />
                                    </div>
                                ))}
                            </div>
                            <div className="mt-3 flex items-center justify-between">
                                <p className="text-sm text-gray-600">
                                    Pasos agregados: {steps.length} / {difficulty ? limits[difficulty] : '?'}
                                </p>
                                <button
                                    onClick={addStep}
                                    className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
                                >+ Agregar paso
                                </button>
                            </div>
                        </div>
                        <div className="flex gap-4">
                            <button
                                onClick={startPreview}
                                className="px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 font-medium"
                            > Vista previa del juego
                            </button>
                        </div>
                        {message && (
                            <div className="p-4 rounded-md bg-blue-50 border border-blue-200 text-blue-800">
                                {message}
                            </div>
                        )}
                    </div>
                </div>
            ) : (
                <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
                    <div className="max-w-6xl mx-auto bg-white rounded-lg shadow-2xl p-8">
                        <h2 className="text-3xl font-bold text-gray-800 mb-4 text-center">{title}</h2>
                        {description && (
                            <div className="relative mb-6 p-4 bg-gray-50 rounded-lg" style={{ minHeight: `${containerHeight}px` }}>
                                <div
                                    className="relative z-10"
                                    style={{
                                        lineHeight: '1.6',
                                        wordWrap: 'break-word'
                                    }}
                                    dangerouslySetInnerHTML={{ __html: processDescriptionForDisplay(description) }}
                                />
                                {images.map((img) => (
                                    <div
                                        key={img.id}
                                        className="absolute bg-white shadow-lg rounded border"
                                        style={{
                                            left: img.x + 'px',
                                            top: img.y + 'px',
                                            width: img.width + 'px',
                                            height: img.height + 'px',
                                            zIndex: 20
                                        }}
                                    >
                                        <img
                                            src={img.src}
                                            alt=""
                                            className="w-full h-full object-contain rounded"
                                        />
                                    </div>
                                ))}
                            </div>
                        )}
                        {question && (
                            <div className="mb-6 p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500">
                                <h3 className="text-lg font-medium text-blue-800">{question}</h3>
                            </div>
                        )}
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div>
                                <h4 className="text-lg font-medium text-gray-800 mb-4">Opciones disponibles:</h4>
                                <div className="space-y-2">
                                    {shuffledSteps.map((step, idx) => (
                                        !userAnswers.includes(step) && (
                                            <div
                                                key={idx}
                                                className={`p-3 border rounded-md cursor-move transition-colors ${gameCompleted
                                                        ? 'bg-gray-100 border-gray-300 cursor-not-allowed'
                                                        : 'bg-blue-100 border-blue-300 hover:bg-blue-200'
                                                    }`}
                                                draggable={!gameCompleted}
                                                onDragStart={(e) => handleDragStart(e, step)}
                                            >
                                                {step}
                                            </div>
                                        )
                                    ))}
                                </div>
                            </div>
                            <div>
                                <h4 className="text-lg font-medium text-gray-800 mb-4">Tu secuencia:</h4>
                                <div className="space-y-2">
                                    {userAnswers.map((ans, i) => (
                                        <div
                                            key={i}
                                            className={`p-3 border-2 border-dashed rounded-md min-h-[3rem] flex items-center justify-center transition-colors ${gameCompleted
                                                    ? (ans === correctSteps[i]
                                                        ? 'border-green-400 bg-green-50'
                                                        : 'border-red-400 bg-red-50')
                                                    : 'border-gray-300 bg-gray-50 hover:border-blue-300'
                                                }`}
                                            onDragOver={!gameCompleted ? handleDragOver : undefined}
                                            onDrop={!gameCompleted ? (e) => handleDrop(e, i) : undefined}
                                        >
                                            {ans ? (
                                                <span className="text-gray-800 font-medium">{ans}</span>
                                            ) : (
                                                <span className="text-gray-500">Paso {i + 1}</span>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                        <div className="mt-6 flex justify-between items-center">
                            <div className="flex gap-4">
                                <button
                                    onClick={resetPreview}
                                    className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                                >Volver al editor
                                </button>
                                {!gameCompleted ? (
                                    <button
                                        onClick={saveSteps}
                                        className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
                                    >Guardar pasos
                                    </button>
                                ) : (
                                    <button
                                        onClick={resetGame}
                                        className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                                    >Intentar de nuevo
                                    </button>
                                )}
                            </div>
                        </div>
                        {showFeedback && (
                            <div className="mt-6 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                                <h3 className="text-xl font-bold text-gray-800 mb-4">📊 Retroalimentación</h3>
                                <pre className="whitespace-pre-wrap text-sm text-gray-700 font-mono bg-white p-4 rounded border">
                                    {feedback}
                                </pre>
                            </div>
                        )}
                        {message && (<div className={`mt-4 p-4 rounded-md ${message.includes('guardado') ? 'bg-green-50 border border-green-200 text-green-800' : message.includes('completa') ? 'bg-yellow-50 border border-yellow-200 text-yellow-800' : 'bg-blue-50 border border-blue-200 text-blue-800'}`}> {message} </div>)} </div> </div>)} </div>);
}